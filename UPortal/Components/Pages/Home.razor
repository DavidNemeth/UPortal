@page "/"
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons
@using UPortal.Components.Features.ExternalApplications
@using UPortal.Data.Models
@using UPortal.Dtos
@inject IDialogService DialogService
@inject IExternalApplicationService ExternalAppService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>External Applications Dashboard</h1>

@if (isAddAppDialogVisible)
{
    <FluentDialog TrapFocus="true" Modal="true" PreventScroll="true">
        <AddExternalApplicationForm ApplicationModel="newApp" OnSave="HandleSaveExternalApp" OnCancel="HandleCancelAddApp" />
    </FluentDialog>
}

@if (_applications == null)
{
    <p><em>Loading applications...</em></p>
    <FluentProgressRing />
}
else if (!_applications.Any())
{
    <p>No external applications have been added yet. Click the "Add Application" button to get started.</p>
}
else
{
    @foreach (var app in _applications)
    {
        <FluentGrid Spacing="3">
            <FluentGridItem xs="12" sm="6" md="4" lg="3">
                <FluentCard Height="120px" Style="width: 100%; cursor: pointer;" @onclick="@(() => NavigateToAppView(app.Id))">
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" Style="height: 100%; padding-bottom: 20px;">
                        <FluentIcon Value="@(GetIconInstance(app.IconName))" Style="margin-bottom: 10px;" />
                        <FluentLabel Typo="Typography.Body">@app.AppName</FluentLabel>
                    </FluentStack>
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())"
                                  Appearance="Appearance.Lightweight"
                                  OnClick="@(() => OpenDeleteConfirmationDialogAsync(app))"
                                  Style="position: absolute; top: 5px; right: 5px; z-index: 1; --button-icon-size: 16px; padding: 4px; min-width: auto;"
                                  Title="Delete Application" />
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>
    }
}
<div style="position: fixed; bottom: 60px; right: 20px; z-index: 1000;">
    <FluentButton IconStart="@(new Icons.Regular.Size24.Add())"
                  Appearance="Appearance.Accent"
                  OnClick="OpenAddAppDialog"
                  Title="Add External Application" />
</div>

@code {
    private List<ExternalApplicationDto> _applications;
    private bool isAddAppDialogVisible = false;
    private ExternalApplicationDto newApp = new ExternalApplicationDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadApplicationsAsync();
    }

    private void NavigateToAppView(int appId)
    {
        NavigationManager.NavigateTo($"/app/{appId}");
    }

    private async Task LoadApplicationsAsync()
    {
        _applications = await ExternalAppService.GetAllAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Opens the dialog to add a new external application.
    /// Resets the <see cref="newApp"/> model to ensure a clean form.
    /// </summary>
    private void OpenAddAppDialog()
    {
        newApp = new ExternalApplicationDto(); // Reset model for new entry
        isAddAppDialogVisible = true;
    }

    /// <summary>
    /// Handles the saving of a new external application.
    /// Adds the application via the <see cref="ExternalAppService"/> and updates the UI.
    /// Shows toast notifications for success or failure.
    /// </summary>
    /// <param name="appFromForm">The external application model from the submitted form.</param>
    private async Task HandleSaveExternalApp(ExternalApplicationDto appFromForm)
    {
        try
        {
            // Ensure IconName is set if selected, otherwise it might be null
            // For this example, we assume appFromForm.IconName is correctly bound from AddExternalApplicationForm
            await ExternalAppService.AddAsync(appFromForm);


            isAddAppDialogVisible = false;
            await LoadApplicationsAsync();
            StateHasChanged();
            ToastService.ShowSuccess($"Application '{0}' added successfully!", 5000, appFromForm.AppName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving external application: {ex.Message}");
            ToastService.ShowError($"Error adding application", 5000);
        }
    }

    /// <summary>
    /// Handles the cancellation of the 'Add External Application' dialog.
    /// </summary>
    private void HandleCancelAddApp()
    {
        isAddAppDialogVisible = false;
    }

    private async Task OpenDeleteConfirmationDialogAsync(ExternalApplicationDto appToDelete)
    {
        var dialog = await DialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete '{appToDelete.AppName}'?",
            "Yes, delete", "No, cancel", "Confirm Deletion");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                await ExternalAppService.DeleteAsync(appToDelete.Id);
                ToastService.ShowSuccess("Application deleted successfully."); // Ensure ToastService is injected
                await LoadApplicationsAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to delete application: {ex.Message}"); // Ensure ToastService is injected
                // Log the exception ex
            }
        }
    }

    // Basic icon instance resolver (can be expanded or moved to a helper class)
    private Icon GetIconInstance(string iconFullName)
    {
        if (string.IsNullOrEmpty(iconFullName)) return new Icons.Regular.Size32.Question();

        // Simplified based on AddExternalApplicationDialog's GetIconInstance
        return iconFullName switch
        {
            "@Icons.Regular.Size24.Home" => new Icons.Regular.Size32.Home(),
            "@Icons.Regular.Size24.AppFolder" => new Icons.Regular.Size32.AppFolder(),
            "@Icons.Regular.Size24.Link" => new Icons.Regular.Size32.Link(),
            "@Icons.Regular.Size24.Globe" => new Icons.Regular.Size32.Globe(),
            "@Icons.Regular.Size24.Settings" => new Icons.Regular.Size32.Settings(),
            "@Icons.Regular.Size24.Mail" => new Icons.Regular.Size32.Mail(),
            "@Icons.Regular.Size24.CalendarLtr" => new Icons.Regular.Size32.CalendarLtr(),
            "@Icons.Regular.Size24.Document" => new Icons.Regular.Size32.Document(),
            "@Icons.Regular.Size24.Heart" => new Icons.Regular.Size32.Heart(),
            "@Icons.Regular.Size24.Star" => new Icons.Regular.Size32.Star(),
            _ => new Icons.Regular.Size32.Question(), // Default for unknown icons
        };
    }
}
