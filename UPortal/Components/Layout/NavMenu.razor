@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons
@inject IExternalApplicationService ExternalAppService
@inject NavigationManager NavigationManager

<FluentNavMenu Id="main-nav" Collapsible="true" Width="250" Title="Navigation menu" AriaLabel="Main navigation menu">
    <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size24.Home())" IconColor="Color.Accent">Home</FluentNavLink>
    <FluentNavGroup Title="Applications" Icon="@(new Icons.Regular.Size24.Apps())">
        @if (_externalApplications != null)
        {

            @foreach (var app in _externalApplications)
            {
                <FluentNavLink Href="@($"/app/{app.Id}")" Icon="@(IconService.GetIcon(app.IconName))" IconColor="Color.Accent">
                    @app.AppName
                </FluentNavLink>
            }
        }
    </FluentNavGroup>
    <FluentNavGroup Title="Admin" Icon="@(new Icons.Regular.Size24.PersonAlert())">
        <FluentNavLink Href="/admin/locations" Icon="@(new Icons.Regular.Size24.Building())" IconColor="Color.Accent">Locations</FluentNavLink>
        <FluentNavLink Href="/admin/machines" Icon="@(new Icons.Regular.Size24.Desktop())" IconColor="Color.Accent">Machines</FluentNavLink>
    </FluentNavGroup>
</FluentNavMenu>


@code {
    private List<ExternalApplicationDto>? _externalApplications;

    protected override async Task OnInitializedAsync()
    {
        await LoadExternalApplicationsAsync();
        // A more robust solution would use a shared service to notify NavMenu of changes.
        // For now, this loads apps when the NavMenu is first initialized.
        // If an app is added/deleted, a page refresh might be needed to see NavMenu updates,
        // or we'd need to implement an eventing system.
    }

    private async Task LoadExternalApplicationsAsync()
    {
        _externalApplications = await ExternalAppService.GetAllAsync();
        StateHasChanged();
    }

    // This method could be used if we implement IDisposable and subscribe to a service event
    // public void Dispose() { /* Unsubscribe from service events */ }
}