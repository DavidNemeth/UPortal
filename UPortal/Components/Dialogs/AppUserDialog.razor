@using UPortal.Dtos
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<UpdateAppUserDto>
@inject UPortal.Services.ILocationService LocationService
@inject ILogger<AppUserDialog> Logger

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm EditContext="@_editContext">
        <DataAnnotationsValidator />
        <FluentStack Orientation="Orientation.Vertical">
            @if (locations is not null)
            {
                <FluentSelect Label="Location"
                              Value="@Content.LocationId.ToString()"
                              ValueChanged="@OnLocationChanged"
                              TOption="string"
                              Required="true"
                              Height="250px">
                    @* Generating options manually gives more control *@
                    @foreach (var location in locations)
                    {
                        <FluentOption Value="@location.Id.ToString()">@location.Name</FluentOption>
                    }
                </FluentSelect>
            }
            else
            {
                <p><em>Loading locations...</em></p>
            }
        </FluentStack>
        <FluentDivider Style="margin-top: 1rem; margin-bottom: 1rem;"></FluentDivider>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentSwitch Name="Active" @bind-Value="@Content.IsActive" Label="Active">
            </FluentSwitch>
            <FluentSwitch Name="Admin" @bind-Value="@Content.IsAdmin" Label="Admin">
            </FluentSwitch>
        </FluentStack>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">
        Cancel
    </FluentButton>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Disabled="@(!_editContext.Validate())">
        Save
    </FluentButton>
</FluentDialogFooter>

@code {
    private EditContext _editContext = default!;
    private List<LocationDto> locations;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public UpdateAppUserDto Content { get; set; } = default!;

    [Parameter]
    public string UserName { get; set; } = string.Empty;

    [Parameter]
    public string AzureAdObjectId { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Content);
        try
        {
            locations = await LocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching locations.");
            locations = new List<LocationDto>(); // Ensure _locations is not null
        }
    }

    private void OnLocationChanged(string? newLocationId)
    {
        if (int.TryParse(newLocationId, out var id) && id > 0)
        {
            Content.LocationId = id;
            _editContext.NotifyFieldChanged(FieldIdentifier.Create(() => Content.LocationId));
        }
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}