@using UPortal.Dtos
@using Microsoft.FluentUI.AspNetCore.Components
@inherits Microsoft.FluentUI.AspNetCore.Components.FluentDialogBase<UPortal.Components.Dialogs.RoleCreateUpdateDialogParameters, object>

@if (Content != null)
{
    <FluentDialogHeader>
        <FluentDialogTitle>@(Content.Id == 0 ? "Create Role" : $"Edit Role: {Content.Name}")</FluentDialogTitle>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentTextField @bind-Value="Content.Name" Label="Role Name" Required="true" Style="width: 100%;" />
        <br/>
        <label>Permissions:</label>
        @if (Content.AllPermissions != null && Content.AllPermissions.Any())
        {
            <div style="max-height: 200px; overflow-y: auto; border: 1px solid var(--neutral-stroke-rest); padding: 10px; margin-top: 5px;">
                @foreach (var perm in Content.AllPermissions)
                {
                    <div>
                        <FluentCheckbox Label="@perm.Name"
                                      @bind-Value="@permissionSelection[perm.Id]" />
                    </div>
                }
            </div>
        }
        else
        {
            <p>No permissions available or loaded.</p>
        }
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent" OnClick="HandlePrimaryAction">@(PrimaryAction)</FluentButton>
        <FluentButton Appearance="Appearance.Neutral" OnClick="CancelAsync">@(SecondaryAction)</FluentButton>
    </FluentDialogFooter>
}

@code {
    private Dictionary<int, bool> permissionSelection = new Dictionary<int, bool>();

    protected override void OnInitialized()
    {
        if (Content != null && Content.AllPermissions != null)
        {
            foreach (var perm in Content.AllPermissions)
            {
                permissionSelection[perm.Id] = Content.SelectedPermissionIds?.Contains(perm.Id) ?? false;
            }
        }
    }

    private async Task HandlePrimaryAction()
    {
        if (Content != null)
        {
            var selectedIds = permissionSelection.Where(kv => kv.Value).Select(kv => kv.Key).ToList();
            if (Content.Id == 0) // Create
            {
                var createDto = new RoleCreateDto { Name = Content.Name, PermissionIds = selectedIds };
                await HideAsync(createDto);
            }
            else // Update
            {
                var updateDto = new RoleUpdateDto { Name = Content.Name, PermissionIds = selectedIds };
                await HideAsync(updateDto);
            }
        }
        else
        {
            await CancelAsync();
        }
    }
}
